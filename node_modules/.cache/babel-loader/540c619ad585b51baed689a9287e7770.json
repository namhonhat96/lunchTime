{"ast":null,"code":"var _jsxFileName = \"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/ChatFeed.jsx\";\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport TyperPerson from './TyperPerson';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props;\n  const chat = chats && chats[activeChat];\n  const theirUsername = '';\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"read-receipt\",\n    style: {\n      float: isMyMessage ? 'right' : 'left',\n      backgroundImage: person.person.avatar && `url(${person.person.avatar})`\n    }\n  }, `read_${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this));\n\n  const signOut = () => {\n    localStorage.removeItem('username');\n    window.location.reload();\n  };\n\n  const renderTyper = () => {\n    const keys = Object.keys(messages);\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const isMyMessage = userName === message.sender.username;\n\n      if (isMyMessage !== false) {\n        theirUsername = userName;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!isMyMessage, \" ? \", /*#__PURE__*/_jsxDEV(TyperPerson, {\n          username: theirUsername\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage ? /*#__PURE__*/_jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[lastMessageKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: renderReadReceipts(message, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  if (!chat) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"signOutBtn\",\n        onClick: signOut,\n        children: \" Sign Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat === null || chat === void 0 ? void 0 : chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.people.map(person => ` ${person.person.username}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), renderMessages(), renderTyper(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/ChatFeed.jsx"],"names":["MyMessage","TheirMessage","MessageForm","TyperPerson","ChatFeed","props","chats","activeChat","userName","messages","chat","theirUsername","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","signOut","localStorage","removeItem","window","location","reload","renderTyper","keys","Object","key","sender","username","renderMessages","lastMessageKey","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport TyperPerson from './TyperPerson';\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n  const chat = chats && chats[activeChat];\n  const theirUsername = '';\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n      <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />    \n  ));\n\n  const signOut = () =>{\n    localStorage.removeItem('username');\n    window.location.reload();\n  };\n\n  const renderTyper = () =>{\n    const keys = Object.keys(messages);\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const isMyMessage = userName === message.sender.username;\n      if(isMyMessage !== false){\n        theirUsername = userName;\n      }\n      return (\n        <div>\n          {!isMyMessage} ? <TyperPerson username={theirUsername}/>\n        </div>\n      );\n    });\n\n  }\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n  \n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n       <div>\n        <button id=\"signOutBtn\" onClick={signOut}> Sign Out</button>\n      </div>\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      {renderTyper()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n\n"]},"metadata":{},"sourceType":"module"}