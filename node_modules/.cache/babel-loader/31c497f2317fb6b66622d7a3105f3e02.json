{"ast":null,"code":"var _jsxFileName = \"/Users/nnho/Desktop/DeployApp/chatApp/sweetthyme/src/components/ChatFeed.jsx\";\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport { isTyping } from 'react-chat-engine';\nimport { getChats } from 'react-chat-engine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  const {\n    chats,\n    activeChat,\n    userName,\n    messages\n  } = props;\n  const chat = chats && chats[activeChat];\n  const username = localStorage.getItem('username');\n  const password = localStorage.getItem('password');\n  var chatID = null;\n  const authObject = {\n    'Project-ID': '3256361b-5f0a-417d-a70f-8ff3bf93c4d0',\n    'User-Name': userName,\n    'User-Secret': password\n  };\n\n  const callback = chats => chatID = chats.chatID;\n\n  getChats(authObject, callback);\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"read-receipt\",\n    style: {\n      float: isMyMessage ? 'right' : 'left',\n      backgroundImage: person.person.avatar && `url(${person.person.avatar})`\n    }\n  }, `read_${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this));\n\n  isTyping(authObject, chatID, data => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"data\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage ? /*#__PURE__*/_jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[lastMessageKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: renderReadReceipts(message, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: isTyping(authObject, chatID)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  if (!chat) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat === null || chat === void 0 ? void 0 : chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.people.map(person => ` ${person.person.username}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["/Users/nnho/Desktop/DeployApp/chatApp/sweetthyme/src/components/ChatFeed.jsx"],"names":["MyMessage","TheirMessage","MessageForm","isTyping","getChats","ChatFeed","props","chats","activeChat","userName","messages","chat","username","localStorage","getItem","password","chatID","authObject","callback","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","data","renderMessages","keys","Object","key","lastMessageKey","sender","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport { isTyping } from 'react-chat-engine';\nimport { getChats } from 'react-chat-engine';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n  const username = localStorage.getItem('username');\n  const password = localStorage.getItem('password');\n  var chatID = null;\n  const authObject = {'Project-ID': '3256361b-5f0a-417d-a70f-8ff3bf93c4d0', 'User-Name': userName, 'User-Secret': password}\n\n  const callback = (chats) => chatID = chats.chatID;\n\n  getChats(authObject, callback)\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  isTyping(authObject, chatID, (data) => \n    <div>\n      data\n    </div>\n  )\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n          <div>\n            {isTyping(authObject, chatID)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n\n"]},"metadata":{},"sourceType":"module"}