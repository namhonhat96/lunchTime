{"ast":null,"code":"var _jsxFileName = \"/Users/nnho/Desktop/DeployApp/chatApp/sweetthyme/src/components/Typer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport * as say from '../index.js';\nimport createContext from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectID = '3256361b-5f0a-417d-a70f-8ff3bf93c4d0';\n\nconst Typer = props => {\n  _s();\n\n  var _useContext = React.useContext(ChatEngineContext),\n      conn = _useContext.conn,\n      activeChat = _useContext.activeChat,\n      typingCounter = _useContext.typingCounter;\n\n  var typers = typingCounter && typingCounter[activeChat] ? typingCounter[activeChat] : [];\n  if (!conn || conn === null) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 40\n  }, this);\n\n  if (props.renderIsTyping) {\n    return props.renderIsTyping(typers);\n  } // const renderMessages = () => {\n  //     const keys = Object.keys(messages);\n  //     return keys.map((key, index) => {\n  //       const message = messages[key];\n  //       const lastMessageKey = index === 0 ? null : keys[index - 1];\n  //       const isMyMessage = userName === message.sender.username;\n  //       return (\n  //         <div key={`msg_${index}`} style={{ width: '100%' }}>\n  //           <div className=\"message-block\">\n  //             {isMyMessage\n  //               ? <MyMessage message={message} />\n  //               : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n  //           </div>\n  //           <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n  //             {renderReadReceipts(message, isMyMessage)}\n  //           </div>\n  //         </div>\n  //       );\n  //     });\n  //   };\n\n\n  return /*#__PURE__*/React__default.createElement(\"div\", null, Object.keys(typers).map(function (username, index) {\n    if (conn.userName !== username && props.currentTime < typers[username] + 2000) {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        key: \"typer_\" + index,\n        style: {\n          color: stringToColor(username),\n          padding: '2px',\n          paddingLeft: '12px'\n        }\n      }, username + \" is typing...\");\n    } else {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        key: \"typer_\" + index\n      });\n    }\n  }));\n};\n\n_s(Typer, \"ySleuVEGUHOXu8arixTynPLQ8z8=\");\n\n_c = Typer;\nexport default Typer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typer\");","map":{"version":3,"sources":["/Users/nnho/Desktop/DeployApp/chatApp/sweetthyme/src/components/Typer.jsx"],"names":["React","useState","SendOutlined","PictureOutlined","sendMessage","isTyping","say","createContext","projectID","Typer","props","_useContext","useContext","ChatEngineContext","conn","activeChat","typingCounter","typers","renderIsTyping","React__default","createElement","Object","keys","map","username","index","userName","currentTime","key","style","color","stringToColor","padding","paddingLeft"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,mBAA9C;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,mBAAtC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,OAA1B;;AACA,MAAMC,SAAS,GAAG,sCAAlB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACrB,MAAIC,WAAW,GAAGX,KAAK,CAACY,UAAN,CAAiBC,iBAAjB,CAAlB;AAAA,MACIC,IAAI,GAAGH,WAAW,CAACG,IADvB;AAAA,MAEIC,UAAU,GAAGJ,WAAW,CAACI,UAF7B;AAAA,MAGIC,aAAa,GAAGL,WAAW,CAACK,aAHhC;;AAKA,MAAIC,MAAM,GAAGD,aAAa,IAAIA,aAAa,CAACD,UAAD,CAA9B,GAA6CC,aAAa,CAACD,UAAD,CAA1D,GAAyE,EAAtF;AACA,MAAI,CAACD,IAAD,IAASA,IAAI,KAAK,IAAtB,EAA4B,oBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;;AAE5B,MAAIJ,KAAK,CAACQ,cAAV,EAA0B;AACxB,WAAOR,KAAK,CAACQ,cAAN,CAAqBD,MAArB,CAAP;AACD,GAXoB,CAarB;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAO,aAAaE,cAAc,CAACC,aAAf,CAA6B,KAA7B,EAAoC,IAApC,EAA0CC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,GAApB,CAAwB,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AAC/G,QAAIX,IAAI,CAACY,QAAL,KAAkBF,QAAlB,IAA8Bd,KAAK,CAACiB,WAAN,GAAoBV,MAAM,CAACO,QAAD,CAAN,GAAmB,IAAzE,EAA+E;AAC7E,aAAO,aAAaL,cAAc,CAACC,aAAf,CAA6B,KAA7B,EAAoC;AACtDQ,QAAAA,GAAG,EAAE,WAAWH,KADsC;AAEtDI,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAEC,aAAa,CAACP,QAAD,CADf;AAELQ,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,WAAW,EAAE;AAHR;AAF+C,OAApC,EAQjBT,QAAQ,GAAG,eARM,CAApB;AASD,KAVD,MAUO;AACL,aAAO,aAAaL,cAAc,CAACC,aAAf,CAA6B,KAA7B,EAAoC;AACtDQ,QAAAA,GAAG,EAAE,WAAWH;AADsC,OAApC,CAApB;AAGD;AACF,GAhB6D,CAA1C,CAApB;AAiBD,CAtDH;;GAAMhB,K;;KAAAA,K;AAwDJ,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport * as say from '../index.js';\nimport createContext from 'react';\nconst projectID = '3256361b-5f0a-417d-a70f-8ff3bf93c4d0';\n\nconst Typer = (props) => {\n    var _useContext = React.useContext(ChatEngineContext),\n        conn = _useContext.conn,\n        activeChat = _useContext.activeChat,\n        typingCounter = _useContext.typingCounter;\n  \n    var typers = typingCounter && typingCounter[activeChat] ? typingCounter[activeChat] : [];\n    if (!conn || conn === null) return(<div></div>);\n  \n    if (props.renderIsTyping) {\n      return props.renderIsTyping(typers);\n    }\n  \n    // const renderMessages = () => {\n    //     const keys = Object.keys(messages);\n    \n    //     return keys.map((key, index) => {\n    //       const message = messages[key];\n    //       const lastMessageKey = index === 0 ? null : keys[index - 1];\n    //       const isMyMessage = userName === message.sender.username;\n    \n    //       return (\n    //         <div key={`msg_${index}`} style={{ width: '100%' }}>\n    //           <div className=\"message-block\">\n    //             {isMyMessage\n    //               ? <MyMessage message={message} />\n    //               : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n    //           </div>\n    //           <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n    //             {renderReadReceipts(message, isMyMessage)}\n    //           </div>\n    //         </div>\n    //       );\n    //     });\n    //   };\n\n      \n    return /*#__PURE__*/React__default.createElement(\"div\", null, Object.keys(typers).map(function (username, index) {\n      if (conn.userName !== username && props.currentTime < typers[username] + 2000) {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          key: \"typer_\" + index,\n          style: {\n            color: stringToColor(username),\n            padding: '2px',\n            paddingLeft: '12px'\n          }\n          \n        }, username + \" is typing...\");\n      } else {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          key: \"typer_\" + index\n        });\n      }\n    }));\n  };\n\n  export default Typer;\n"]},"metadata":{},"sourceType":"module"}