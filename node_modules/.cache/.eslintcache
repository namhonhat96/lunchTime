[{"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/index.js":"1","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/App.js":"2","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/LoginForm.jsx":"3","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/ChatFeed.jsx":"4","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/SignUpForm.jsx":"5","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/TheirMessage.jsx":"6","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/MessageForm.jsx":"7","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/MyMessage.jsx":"8"},{"size":147,"mtime":1611909856000,"results":"9","hashOfConfig":"10"},{"size":856,"mtime":1618068633580,"results":"11","hashOfConfig":"10"},{"size":1743,"mtime":1618068331765,"results":"12","hashOfConfig":"10"},{"size":2036,"mtime":1618086676145,"results":"13","hashOfConfig":"10"},{"size":2394,"mtime":1618068513774,"results":"14","hashOfConfig":"10"},{"size":958,"mtime":1618074769665,"results":"15","hashOfConfig":"10"},{"size":1446,"mtime":1618076114081,"results":"16","hashOfConfig":"10"},{"size":489,"mtime":1618074636137,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12gkvan",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/index.js",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/App.js",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/LoginForm.jsx",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/ChatFeed.jsx",["35"],"import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n  const chat = chats && chats[activeChat];\n  const username = localStorage.getItem('username');\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n\n","/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/SignUpForm.jsx",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/TheirMessage.jsx",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/MessageForm.jsx",[],"/Users/nnho/Desktop/DeployApp/testing/lunchTime/src/components/MyMessage.jsx",[],{"ruleId":"36","severity":1,"message":"37","line":8,"column":9,"nodeType":"38","messageId":"39","endLine":8,"endColumn":17},"no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar"]